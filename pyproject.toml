[build-system]
requires = ["scikit-build-core>=0.10", "pybind11"]
build-backend = "scikit_build_core.build"

[project]
name = "pyfdb"
dynamic = ["version"]

description="A minimal PyFDB package (with pybind11)"
readme = "README.md"
license = { file = "LICENSE.txt" }
authors = [
  { name = "European Centre for Medium-Range Weather Forecasts (ECMWF)", email = "software.support@ecmwf.int" },
]
requires-python = ">=3.7"
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
keywords = [
  "python",
  "fdb",
  "tools",
]

urls.Documentation = "https://github.com/ecmwf/pyfdb"
urls.Homepage = "https://github.com/ecmwf/pyfdb"
urls.Issues = "https://github.com/ecmwf/pyfdb/issues"
urls.Repository = "https://github.com/ecmwf/pyfdb"

dependencies = [
  "cffi",
  "findlibs",
  "isort",
  "black",
  "flake8",
  "tox>=4.19",
  "eccodes"
]

[project.optional-dependencies]
test = [
  "pytest",
  "pytest-cov",
  "pytest-flakes"
]

[tool.scikit-build]
# Some older versions of pip are unable to load standard universal tags
#  scikit-build-core can expand the macOS universal tags for you for maximum historic compatibility if youâ€™d like
wheel.expand-macos-universal-tags = true
minimum-version = "build-system.requires"
build.verbose = true
logging.level = "DEBUG"
build-dir="build"

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "version.py"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli_level = "INFO"
filterwarnings = [
  "error",
  "ignore::pytest.PytestCacheWarning",
]
testpaths = ["tests"]


[tool.cibuildwheel]
build-frontend = "build[uv]"
test-command = "pytest {project}/tests"
test-extras = ["test"]

[tool.cibuildwheel.pyodide]
build-frontend = {name = "build", args = ["--exports", "whole_archive"]}

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
ignore = [
  "PLR09",    # Too many X
  "PLR2004",  # Magic comparison
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]


[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120
skip_glob=".*"
skip = ["setup.py"]
src_paths = ["src", "tests"]
